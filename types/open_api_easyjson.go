// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package types

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson60d9767dDecodeGithubComLutomasSwagger2MdTypes(in *jlexer.Lexer, out *OpenApiType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "format":
			if in.IsNull() {
				in.Skip()
				out.Format = nil
			} else {
				if out.Format == nil {
					out.Format = new(string)
				}
				*out.Format = string(in.String())
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "required":
			if in.IsNull() {
				in.Skip()
				out.Required = nil
			} else {
				in.Delim('[')
				if out.Required == nil {
					if !in.IsDelim(']') {
						out.Required = make([]string, 0, 4)
					} else {
						out.Required = []string{}
					}
				} else {
					out.Required = (out.Required)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Required = append(out.Required, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "$ref":
			if in.IsNull() {
				in.Skip()
				out.Ref = nil
			} else {
				if out.Ref == nil {
					out.Ref = new(string)
				}
				*out.Ref = string(in.String())
			}
		case "enum":
			if in.IsNull() {
				in.Skip()
				out.Enum = nil
			} else {
				in.Delim('[')
				if out.Enum == nil {
					if !in.IsDelim(']') {
						out.Enum = make([]string, 0, 4)
					} else {
						out.Enum = []string{}
					}
				} else {
					out.Enum = (out.Enum)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.Enum = append(out.Enum, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "properties":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Properties = make(map[string]*OpenApiType)
				} else {
					out.Properties = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 *OpenApiType
					if in.IsNull() {
						in.Skip()
						v3 = nil
					} else {
						if v3 == nil {
							v3 = new(OpenApiType)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v3).UnmarshalJSON(data))
						}
					}
					(out.Properties)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		case "example":
			if m, ok := out.Example.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Example.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Example = in.Interface()
			}
		case "allOf":
			if in.IsNull() {
				in.Skip()
				out.AllOf = nil
			} else {
				in.Delim('[')
				if out.AllOf == nil {
					if !in.IsDelim(']') {
						out.AllOf = make([]*OpenApiType, 0, 8)
					} else {
						out.AllOf = []*OpenApiType{}
					}
				} else {
					out.AllOf = (out.AllOf)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *OpenApiType
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(OpenApiType)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v4).UnmarshalJSON(data))
						}
					}
					out.AllOf = append(out.AllOf, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				if out.Items == nil {
					out.Items = new(OpenApiType)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Items).UnmarshalJSON(data))
				}
			}
		case "additionalProperties":
			if in.IsNull() {
				in.Skip()
				out.AdditionalProperties = nil
			} else {
				if out.AdditionalProperties == nil {
					out.AdditionalProperties = new(OpenApiType)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.AdditionalProperties).UnmarshalJSON(data))
				}
			}
		case "maxLength":
			if in.IsNull() {
				in.Skip()
				out.MaxLength = nil
			} else {
				if out.MaxLength == nil {
					out.MaxLength = new(int64)
				}
				*out.MaxLength = int64(in.Int64())
			}
		case "minLength":
			if in.IsNull() {
				in.Skip()
				out.MinLength = nil
			} else {
				if out.MinLength == nil {
					out.MinLength = new(int64)
				}
				*out.MinLength = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson60d9767dEncodeGithubComLutomasSwagger2MdTypes(out *jwriter.Writer, in OpenApiType) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	if in.Format != nil {
		const prefix string = ",\"format\":"
		out.RawString(prefix)
		out.String(string(*in.Format))
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(*in.Description))
	}
	if len(in.Required) != 0 {
		const prefix string = ",\"required\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v5, v6 := range in.Required {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	if in.Ref != nil {
		const prefix string = ",\"$ref\":"
		out.RawString(prefix)
		out.String(string(*in.Ref))
	}
	if len(in.Enum) != 0 {
		const prefix string = ",\"enum\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v7, v8 := range in.Enum {
				if v7 > 0 {
					out.RawByte(',')
				}
				out.String(string(v8))
			}
			out.RawByte(']')
		}
	}
	if len(in.Properties) != 0 {
		const prefix string = ",\"properties\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v9First := true
			for v9Name, v9Value := range in.Properties {
				if v9First {
					v9First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v9Name))
				out.RawByte(':')
				if v9Value == nil {
					out.RawString("null")
				} else {
					out.Raw((*v9Value).MarshalJSON())
				}
			}
			out.RawByte('}')
		}
	}
	if in.Example != nil {
		const prefix string = ",\"example\":"
		out.RawString(prefix)
		if m, ok := in.Example.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Example.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Example))
		}
	}
	if len(in.AllOf) != 0 {
		const prefix string = ",\"allOf\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v10, v11 := range in.AllOf {
				if v10 > 0 {
					out.RawByte(',')
				}
				if v11 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v11).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	if in.Items != nil {
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		out.Raw((*in.Items).MarshalJSON())
	}
	if in.AdditionalProperties != nil {
		const prefix string = ",\"additionalProperties\":"
		out.RawString(prefix)
		out.Raw((*in.AdditionalProperties).MarshalJSON())
	}
	if in.MaxLength != nil {
		const prefix string = ",\"maxLength\":"
		out.RawString(prefix)
		out.Int64(int64(*in.MaxLength))
	}
	if in.MinLength != nil {
		const prefix string = ",\"minLength\":"
		out.RawString(prefix)
		out.Int64(int64(*in.MinLength))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OpenApiType) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson60d9767dEncodeGithubComLutomasSwagger2MdTypes(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OpenApiType) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson60d9767dEncodeGithubComLutomasSwagger2MdTypes(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OpenApiType) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson60d9767dDecodeGithubComLutomasSwagger2MdTypes(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OpenApiType) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson60d9767dDecodeGithubComLutomasSwagger2MdTypes(l, v)
}
func easyjson60d9767dDecodeGithubComLutomasSwagger2MdTypes1(in *jlexer.Lexer, out *OpenApiPathDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson60d9767dEncodeGithubComLutomasSwagger2MdTypes1(out *jwriter.Writer, in OpenApiPathDetails) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Description != nil {
		const prefix string = ",\"description\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(*in.Description))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OpenApiPathDetails) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson60d9767dEncodeGithubComLutomasSwagger2MdTypes1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OpenApiPathDetails) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson60d9767dEncodeGithubComLutomasSwagger2MdTypes1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OpenApiPathDetails) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson60d9767dDecodeGithubComLutomasSwagger2MdTypes1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OpenApiPathDetails) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson60d9767dDecodeGithubComLutomasSwagger2MdTypes1(l, v)
}
func easyjson60d9767dDecodeGithubComLutomasSwagger2MdTypes2(in *jlexer.Lexer, out *OpenApiPath) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "get":
			if in.IsNull() {
				in.Skip()
				out.Get = nil
			} else {
				if out.Get == nil {
					out.Get = new(OpenApiPathDetails)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Get).UnmarshalJSON(data))
				}
			}
		case "post":
			if in.IsNull() {
				in.Skip()
				out.Post = nil
			} else {
				if out.Post == nil {
					out.Post = new(OpenApiPathDetails)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Post).UnmarshalJSON(data))
				}
			}
		case "delete":
			if in.IsNull() {
				in.Skip()
				out.Delete = nil
			} else {
				if out.Delete == nil {
					out.Delete = new(OpenApiPathDetails)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Delete).UnmarshalJSON(data))
				}
			}
		case "update":
			if in.IsNull() {
				in.Skip()
				out.Update = nil
			} else {
				if out.Update == nil {
					out.Update = new(OpenApiPathDetails)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Update).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson60d9767dEncodeGithubComLutomasSwagger2MdTypes2(out *jwriter.Writer, in OpenApiPath) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Get != nil {
		const prefix string = ",\"get\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((*in.Get).MarshalJSON())
	}
	if in.Post != nil {
		const prefix string = ",\"post\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.Post).MarshalJSON())
	}
	if in.Delete != nil {
		const prefix string = ",\"delete\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.Delete).MarshalJSON())
	}
	if in.Update != nil {
		const prefix string = ",\"update\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.Update).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OpenApiPath) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson60d9767dEncodeGithubComLutomasSwagger2MdTypes2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OpenApiPath) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson60d9767dEncodeGithubComLutomasSwagger2MdTypes2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OpenApiPath) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson60d9767dDecodeGithubComLutomasSwagger2MdTypes2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OpenApiPath) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson60d9767dDecodeGithubComLutomasSwagger2MdTypes2(l, v)
}
func easyjson60d9767dDecodeGithubComLutomasSwagger2MdTypes3(in *jlexer.Lexer, out *OpenApiFileWrapper) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "openapi":
			out.Openapi = string(in.String())
		case "paths":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Paths = make(map[string]*OpenApiPath)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v12 *OpenApiPath
					if in.IsNull() {
						in.Skip()
						v12 = nil
					} else {
						if v12 == nil {
							v12 = new(OpenApiPath)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v12).UnmarshalJSON(data))
						}
					}
					(out.Paths)[key] = v12
					in.WantComma()
				}
				in.Delim('}')
			}
		case "components":
			if in.IsNull() {
				in.Skip()
				out.Components = nil
			} else {
				if out.Components == nil {
					out.Components = new(OpenApiComponents)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Components).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson60d9767dEncodeGithubComLutomasSwagger2MdTypes3(out *jwriter.Writer, in OpenApiFileWrapper) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"openapi\":"
		out.RawString(prefix[1:])
		out.String(string(in.Openapi))
	}
	{
		const prefix string = ",\"paths\":"
		out.RawString(prefix)
		if in.Paths == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v13First := true
			for v13Name, v13Value := range in.Paths {
				if v13First {
					v13First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v13Name))
				out.RawByte(':')
				if v13Value == nil {
					out.RawString("null")
				} else {
					out.Raw((*v13Value).MarshalJSON())
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"components\":"
		out.RawString(prefix)
		if in.Components == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Components).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OpenApiFileWrapper) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson60d9767dEncodeGithubComLutomasSwagger2MdTypes3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OpenApiFileWrapper) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson60d9767dEncodeGithubComLutomasSwagger2MdTypes3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OpenApiFileWrapper) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson60d9767dDecodeGithubComLutomasSwagger2MdTypes3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OpenApiFileWrapper) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson60d9767dDecodeGithubComLutomasSwagger2MdTypes3(l, v)
}
func easyjson60d9767dDecodeGithubComLutomasSwagger2MdTypes4(in *jlexer.Lexer, out *OpenApiComponents) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "schemas":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Schemas = make(map[string]*OpenApiType)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v14 *OpenApiType
					if in.IsNull() {
						in.Skip()
						v14 = nil
					} else {
						if v14 == nil {
							v14 = new(OpenApiType)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v14).UnmarshalJSON(data))
						}
					}
					(out.Schemas)[key] = v14
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson60d9767dEncodeGithubComLutomasSwagger2MdTypes4(out *jwriter.Writer, in OpenApiComponents) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"schemas\":"
		out.RawString(prefix[1:])
		if in.Schemas == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v15First := true
			for v15Name, v15Value := range in.Schemas {
				if v15First {
					v15First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v15Name))
				out.RawByte(':')
				if v15Value == nil {
					out.RawString("null")
				} else {
					out.Raw((*v15Value).MarshalJSON())
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OpenApiComponents) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson60d9767dEncodeGithubComLutomasSwagger2MdTypes4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OpenApiComponents) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson60d9767dEncodeGithubComLutomasSwagger2MdTypes4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OpenApiComponents) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson60d9767dDecodeGithubComLutomasSwagger2MdTypes4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OpenApiComponents) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson60d9767dDecodeGithubComLutomasSwagger2MdTypes4(l, v)
}
